#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
Функция СведенияОВнешнейОбработке() Экспорт
  
  ПараметрыРегистрации = Новый Структура;
  ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет"); //Варианты: "ДополнительнаяОбработка", "ДополнительныйОтчет", "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов" 

   
  ПараметрыРегистрации.Вставить("Наименование", "Отчет по ремонту оборудования с окраской");
  ПараметрыРегистрации.Вставить("Версия", "1.8"); //"1.0"
  ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь); //Варианты: Истина, Ложь
  ПараметрыРегистрации.Вставить("Информация", "Отчет по ремонту оборудования с оплатой");
  ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");// не ниже какой версии БСП подерживается обработка
  
  ПараметрыРегистрации.Вставить("РассылкаОтчетов", Истина); //Варианты: Истина, Ложь

  ТаблицаКоманд = ПолучитьТаблицуКоманд();

  ДобавитьКоманду(ТаблицаКоманд,
          Метаданные().Представление(),
          Метаданные().Представление(),
          "ОткрытиеФормы",  //Использование.  Варианты: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"   
          Ложь,//Показывать оповещение. Варианты Истина, Ложь 
          "");//Модификатор 

  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

  Возврат ПараметрыРегистрации;

КонецФункции

Функция ПолучитьТаблицуКоманд()

  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

  Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры
	
	
#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	//Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;

	// Изменение настроек по функциональным опциям
	// НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);

КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды")
		И Параметры.Свойство("ОписаниеКоманды")
		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда
		
		Если Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ОтчетПоИнтересам" Тогда
			
			// СформироватьПараметрыФормыОтчетПоКлиенту(Параметры.ПараметрКоманды, ЭтаФорма.ФормаПараметры);
			
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ПродажиПоЗаказу" Тогда
		//	ЭтаФорма.ФормаПараметры.Отбор.Вставить("ЗаказКлиента", Параметры.ПараметрКоманды);
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ПродажиПоНоменклатуре" Тогда
		//	ЭтаФорма.ФормаПараметры.Отбор.Вставить("Номенклатура", Параметры.ПараметрКоманды);
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ПродажиПоСегменту" Тогда
		//	
		//	Параметры.ФиксированныеНастройки = ПолучитьФиксированныеНастройкиПродажиПоСегменту(Параметры.ПараметрКоманды);
		//	ЭтаФорма.ФормаПараметры.ФиксированныеНастройки = Параметры.ФиксированныеНастройки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительные команды
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных
	НастройкиОтчета = ЭтаФорма.НастройкиОтчета;
	
	//ЭтаФорма.НастройкиОтчета.Вставить("ВыводитьЗаголовкиНастроек", Истина);
	
	//Если НастройкиОтчета.Свойство("РасширенныйОтбор") Тогда
	//	РасширенныйОтбор = КомпоновщикНастроекФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(
	//		Тип("ЭлементОтбораКомпоновкиДанных"));
	//	РасширенныйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
	//	Если ТипЗнч(НастройкиОтчета.РасширенныйОтбор) = Тип("Массив") Тогда
	//		ЭтоМассив = Истина;
	//		Если НастройкиОтчета.РасширенныйОтбор.Количество() > 0 Тогда
	//			ПервыйЭлемент = НастройкиОтчета.РасширенныйОтбор[0];
	//		Иначе
	//			ПервыйЭлемент = Неопределено;
	//		КонецЕсли;
	//	Иначе
	//		ЭтоМассив = Ложь;
	//		ПервыйЭлемент = НастройкиОтчета.РасширенныйОтбор;
	//	КонецЕсли;
	//	Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
	//		Если ЭтоМассив Тогда
	//			ЕстьПодчиненныеПартнеры = Ложь;
	//			Для Каждого ЭлементПараметраКоманды Из НастройкиОтчета.РасширенныйОтбор Цикл
	//				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
	//					ЕстьПодчиненныеПартнеры = Истина;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//		Иначе
	//			ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(НастройкиОтчета.РасширенныйОтбор);
	//		КонецЕсли;
	//		Если ЕстьПодчиненныеПартнеры И ЭтоМассив Тогда
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	//		ИначеЕсли ЕстьПодчиненныеПартнеры Тогда
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	//		ИначеЕсли ЭтоМассив Тогда
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		Иначе
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		КонецЕсли;
	//		РасширенныйОтбор.ПравоеЗначение = НастройкиОтчета.РасширенныйОтбор;
	//	ИначеЕсли ТипЗнч(НастройкиОтчета.РасширенныйОтбор) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
	//		РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		РасширенныйОтбор.ПравоеЗначение = СегментыСервер.МассивЭлементов(
	//			ПервыйЭлемент);
	//	КонецЕсли;
	//	РасширенныйОтбор.Использование = Истина;
	//КонецЕсли;
	////++ Локализация
	////++ НЕ УТ	
	//БухгалтерскиеОтчеты.ИнициализироватьРежимВыгрузкиБСП(ЭтаФорма);
	//-- НЕ УТ
	//-- Локализация

	//Параметры = Форма.Параметры;
	//
	//Если Параметры.Свойство("ПараметрКоманды") Тогда
	//	
	//	Если Параметры.Свойство("ОписаниеКоманды")
	//		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда
	//		
	//		// Структура с полями из ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
	//		ОписаниеКоманды = Параметры.ОписаниеКоманды; // Структура -
	//		ДополнительныеПараметрыКоманды = ОписаниеКоманды.ДополнительныеПараметры; // Структура -
	//		Если ДополнительныеПараметрыКоманды.ИмяКоманды = "ВедомостьПоДокументам" Тогда
	//			Форма.ФормаПараметры.Отбор.Вставить("Клиент", Параметры.ПараметрКоманды);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
	
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	ДокументРезультат.Очистить();
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;  
	// - Если сделать так, как показано выше(рекомендуют на некоторых ресурсах), то при изменении настроек в режиме клиента
	// этих изменений Вы не увидите, потому что настройки всегда будут по умолчанию. Как правильно - вариант ниже
	ОтборНоменклатуры = Новый СписокЗначений;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
	ЭлементыОтбора = Настройки.Отбор.Элементы;
	Для каждого Элемент Из ЭлементыОтбора Цикл
		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура") И Элемент.Использование = Истина
			И (Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке или Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) Тогда
			ОтборНоменклатуры = Элемент.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	Период = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ДатаОтчета = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаГрафик КАК ДатаНачалаРаботПланФакт,
	|	ВЫБОР
	|		КОГДА КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецГрафик = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаГрафик, ДЕНЬ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецГрафик, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияРаботПланФакт,
	|	(КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаГрафик) КАК НачалоГрафик,
	|	(ВЫБОР
	|			КОГДА КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецГрафик = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА КОНЕЦПЕРИОДА(КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаГрафик, ДЕНЬ)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецГрафик, ДЕНЬ)
	|		КОНЕЦ) КАК КонецГрафик,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.Дата КАК ДатаРегистрации,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.ОтветственныйЗаУчасток КАК Ответственный,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаФакт КАК НачалоФакт,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецФакт КАК КонецФакт,
	|	(""График"") КАК статус,
	|	(КАМИ_РемонтОборудованияОбороты.Регистратор.Дата) КАК ДатаДокумента,
	|	(КАМИ_РемонтОборудованияОбороты.Номенклатура.Артикул) КАК Артикул,
	|	КАМИ_РемонтОборудованияОбороты.Номенклатура КАК Номенклатура,
	|	КАМИ_РемонтОборудованияОбороты.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|				ИЛИ КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	|			ТОГДА КАМИ_РемонтОборудованияОбороты.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОформлено,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.НомерАкта КАК НомерАкта,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.Номер КАК НомерДокумента,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаАкта КАК ДатаАкта,
	|	КАМИ_РемонтОборудованияОбороты.Характеристика КАК Характеристика,
	|	КАМИ_РемонтОборудованияОбороты.Назначение КАК Назначение,
	|	КАМИ_РемонтОборудованияОбороты.Склад КАК Склад,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.Организация КАК Организация,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.Причина КАК Причина,
	|	ВЫБОР
	|		КОГДА КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.ВРаботе)
	|			ТОГДА КАМИ_РемонтОборудованияОбороты.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоВРаботе,
	|	КАМИ_РемонтОборудованияОбороты.Статус КАК СтатусДокумента,
	|	ВЫБОР
	|		КОГДА КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Завершено)
	|			ТОГДА КАМИ_РемонтОборудованияОбороты.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗавершено,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(КАМИ_РемонтОборудованияОбороты.Регистратор.Описание КАК СТРОКА(200)) КАК Описание,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.ОтгрузкаПоСлужебнойЗаписке КАК ОтгрузкаПоСлужебнойЗаписке,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.ВключенВГрафикРемонта КАК ВключенВГрафикРемонта,
	|	КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано.Период КАК ДатаИзмененияСтатусаЗапланировано,
	|	КАМИ_СтатусыРемонтаЗавершено.Период КАК ДатаИзмененияСтатусаЗавершено,
	|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.Период КАК ДатаИзмененияСтатусаВРаботе,
	|	КАМИ_СтатусыРемонтаОтложено.ТребуетсяЗаказЗапчасти КАК ТребуетсяЗаказЗапчасти,
	|	КАМИ_СтатусыРемонтаОтложено.Период КАК ДатаИзмененияСтатусаОтложено,
	|	КАМИ_СтатусыРемонтаЗавершено.ТребуетсяВыездИнженера КАК ТребуетсяВыездИнженераЗавершено,
	|	КАМИ_СтатусыРемонтаЗавершено.ТребуетсяЗаказЗапчасти КАК ТребуетсяЗаказЗапчастиЗавершено,
	|	КАМИ_СтатусыРемонтаОтложено.ТребуетсяВыездИнженера КАК ТребуетсяВыездИнженераОтложено,
	|	(КАМИ_СтатусыРемонтаОтложено.ТребуетсяЗаказЗапчасти) КАК ТребуетсяЗаказЗапчастиОтложено,
	|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.ТребуетсяВыездИнженера КАК ТребуетсяВыездИнженераВРаботе,
	|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.ТребуетсяЗаказЗапчасти КАК ТребуетсяЗаказЗапчастиВРаботе,
	|	КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано.ТребуетсяВыездИнженера КАК ТребуетсяВыездИнженераЗапланировано,
	|	КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано.ТребуетсяЗаказЗапчасти КАК ТребуетсяЗаказЗапчастиЗапланировано,
	|	КАМИ_РемонтОборудованияОбороты.Регистратор.Приоритет КАК Приоритет,
	|	КАМИ_СтатусыРемонтаТекущийСрез.ДатаОкончанияРабот КАК ДатаОкончанияРабот,
	|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.ДатаОкончанияРабот КАК ДатаОкончанияРаботВРаботе,
	|	КАМИ_СтатусыРемонтаОтложено.ДатаОкончанияРабот КАК ДатаОкончанияРаботОтложено
	//|	МИНИМУМ(КАМИ_СтатусыРемонтаОснОтложено.Период) КАК ПериодПредыдущегоСтатусаОтложено,
	//|	МИНИМУМ(КАМИ_СтатусыРемонтаОснВРаботе.Период) КАК ПериодПредыдущегоСтатусаВРаботе
	|ПОМЕСТИТЬ Вт_ДляМенеджера
	|ИЗ
	|	РегистрСведений.КАМИ_РемонтОборудованияРС КАК КАМИ_РемонтОборудованияОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КАМИ_СтатусыРемонта.СрезПоследних(, СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)) КАК КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано
	|		ПО КАМИ_РемонтОборудованияОбороты.Регистратор = КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано.РемонтОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КАМИ_СтатусыРемонта.СрезПоследних(, СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Вработе)) КАК КАМИ_СтатусыРемонтаСрезПоследнихВРаботе
	|		ПО КАМИ_РемонтОборудованияОбороты.Регистратор = КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.РемонтОборудования
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КАМИ_СтатусыРемонта КАК КАМИ_СтатусыРемонтаОснВРаботе
	//|		ПО (КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.РемонтОборудования = КАМИ_СтатусыРемонтаОснВРаботе.РемонтОборудования)
	//|			И (КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.Период < КАМИ_СтатусыРемонтаОснВРаботе.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КАМИ_СтатусыРемонта.СрезПоследних(, СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Завершено)) КАК КАМИ_СтатусыРемонтаЗавершено
	|		ПО КАМИ_РемонтОборудованияОбороты.Регистратор = КАМИ_СтатусыРемонтаЗавершено.РемонтОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КАМИ_СтатусыРемонта.СрезПоследних(, СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.отложено)) КАК КАМИ_СтатусыРемонтаОтложено
	|		ПО КАМИ_РемонтОборудованияОбороты.Регистратор = КАМИ_СтатусыРемонтаОтложено.РемонтОборудования
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КАМИ_СтатусыРемонта КАК КАМИ_СтатусыРемонтаОснОтложено
	//|		ПО (КАМИ_СтатусыРемонтаОтложено.РемонтОборудования = КАМИ_СтатусыРемонтаОснОтложено.РемонтОборудования)
	//|			И (КАМИ_СтатусыРемонтаОтложено.Период < КАМИ_СтатусыРемонтаОснОтложено.Период)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КАМИ_СтатусыРемонта.СрезПоследних КАК КАМИ_СтатусыРемонтаТекущийСрез
	|		ПО КАМИ_РемонтОборудованияОбороты.Регистратор = КАМИ_СтатусыРемонтаТекущийСрез.РемонтОборудования
	|			И КАМИ_РемонтОборудованияОбороты.Регистратор.Статус = КАМИ_СтатусыРемонтаТекущийСрез.СтатусДокумента
	|ГДЕ
	|	ИСТИНА
	|	И ВЫБОР
	|			КОГДА &УстановленПериод
	|					И КАМИ_РемонтОборудованияОбороты.Регистратор.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Завершено)
	|				ТОГДА КАМИ_СтатусыРемонтаЗавершено.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВсяНоменклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КАМИ_РемонтОборудованияОбороты.Номенклатура В (&ОтборНоменклатуры)
	|		КОНЕЦ
	|
	//|СГРУППИРОВАТЬ ПО
	//|	КАМИ_РемонтОборудованияОбороты.Серия,
	//|	КАМИ_РемонтОборудованияОбороты.Номенклатура,
	//|	КАМИ_РемонтОборудованияОбороты.Статус,
	//|	КАМИ_РемонтОборудованияОбороты.Назначение,
	//|	КАМИ_РемонтОборудованияОбороты.Склад,
	//|	КАМИ_РемонтОборудованияОбороты.Характеристика,
	//|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.ТребуетсяЗаказЗапчасти,
	//|	КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано.ТребуетсяВыездИнженера,
	//|	КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано.ТребуетсяЗаказЗапчасти,
	//|	КАМИ_СтатусыРемонтаОтложено.ТребуетсяВыездИнженера,
	//|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.ТребуетсяВыездИнженера,
	//|	КАМИ_СтатусыРемонтаТекущийСрез.ДатаОкончанияРабот,
	//|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.ДатаОкончанияРабот,
	//|	КАМИ_СтатусыРемонтаОтложено.ДатаОкончанияРабот,
	//|	КАМИ_СтатусыРемонтаОтложено.Период,
	//|	КАМИ_СтатусыРемонтаЗавершено.ТребуетсяВыездИнженера,
	//|	КАМИ_СтатусыРемонтаЗавершено.ТребуетсяЗаказЗапчасти,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор,
	//|	КАМИ_СтатусыРемонтаСрезПоследнихЗапланировано.Период,
	//|	КАМИ_СтатусыРемонтаЗавершено.Период,
	//|	КАМИ_СтатусыРемонтаСрезПоследнихВРаботе.Период,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаГрафик,
	//|	ВЫБОР
	//|		КОГДА КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецГрафик = ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА КОНЕЦПЕРИОДА(КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаГрафик, ДЕНЬ)
	//|		ИНАЧЕ КОНЕЦПЕРИОДА(КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецГрафик, ДЕНЬ)
	//|	КОНЕЦ,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.Дата,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.ОтветственныйЗаУчасток,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаНачалаФакт,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаКонецФакт,
	//|	ВЫБОР
	//|		КОГДА КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	//|				ИЛИ КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	//|			ТОГДА КАМИ_РемонтОборудованияОбороты.Количество
	//|		ИНАЧЕ 0
	//|	КОНЕЦ,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.НомерАкта,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.Номер,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.ДатаАкта,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.Организация,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.НаправлениеДеятельности,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.Причина,
	//|	ВЫБОР
	//|		КОГДА КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.ВРаботе)
	//|			ТОГДА КАМИ_РемонтОборудованияОбороты.Количество
	//|		ИНАЧЕ 0
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА КАМИ_РемонтОборудованияОбороты.Статус = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Завершено)
	//|			ТОГДА КАМИ_РемонтОборудованияОбороты.Количество
	//|		ИНАЧЕ 0
	//|	КОНЕЦ,
	//|	ВЫРАЗИТЬ(КАМИ_РемонтОборудованияОбороты.Регистратор.Описание КАК СТРОКА(200)),
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.ОтгрузкаПоСлужебнойЗаписке,
	//|	КАМИ_РемонтОборудованияОбороты.Регистратор.ВключенВГрафикРемонта,
	//|	КАМИ_СтатусыРемонтаОтложено.ТребуетсяЗаказЗапчасти,
//	|	КАМИ_РемонтОборудованияОбороты.Регистратор.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ДляМенеджера.Номенклатура КАК Номенклатура
	|ИЗ
	|	Вт_ДляМенеджера КАК Вт_ДляМенеджера"; 
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("УстановленПериод",Период.Использование);
	Запрос.УстановитьПараметр("ВсяНоменклатура",(ТипЗнч(ОтборНоменклатуры) = Тип("СписокЗначений") и ОтборНоменклатуры.Количество() = 0 ));
	Запрос.УстановитьПараметр("ОтборНоменклатуры",ОтборНоменклатуры);
	Запрос.УстановитьПараметр("НачалоПериода",Период.Значение.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",Период.Значение.ДатаОкончания);
	
	ТаблицаЗначенийРемонтов = Запрос.Выполнить().Выгрузить();
	АРМОбъект = Обработки.КАМИ_АРМСклад.Создать();
	//Устанавливаем отборы для запросов из АРМ склада.
	//АРМ склад используем чтобы достать процент оплаты
	Запрос.УстановитьПараметр("Пользователь",Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СкрываемаяВАРМОрганизация",РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("СкрываемаяВАРМОрганизация"));
	Запрос.УстановитьПараметр("ЕстьДоступКСкрываемойОрганизации",Истина);
	Запрос.УстановитьПараметр("ДатаОтчета",?((ДатаОтчета.Использование И ЗначениеЗаполнено(ДатаОтчета.Значение)), КонецДня(ДатаОтчета.Значение), ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВключатьВсюНоменклатуру", Ложь);
	Запрос.УстановитьПараметр("ВключаемыеСклады", Новый Массив);
	Запрос.УстановитьПараметр("ВключатьВсеСклады", Истина);
	Запрос.УстановитьПараметр("ИсключаемыеСклады", Новый Массив);	
	Запрос.УстановитьПараметр("ВсегдаИсключаемыеСклады", Новый Массив);	
	Запрос.УстановитьПараметр("ВключаемыеМенеджеры", Новый Массив);	
	Запрос.УстановитьПараметр("ИсключаемыеМенеджеры", Новый Массив);	
	Запрос.УстановитьПараметр("ВключатьВсехМенеджеров", Истина);	
	НаправлениеДеятельностиНекондиция=РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("Направление деятельности некондиция");
	Запрос.УстановитьПараметр("НаправлениеДеятельностиНекондиция", НаправлениеДеятельностиНекондиция);
	//Получаем остатки по заказам клиентов
	ЗаказыКлиента = Обработки.КАМИ_АРМСклад.ПолучитьТЗЗаказыКлиентов(Запрос,ТаблицаЗначенийРемонтов.ВыгрузитьКолонку("Номенклатура")); 
	Запрос.Текст =  " УНИЧТОЖИТЬ СкладыИсключенные; ";
	Запрос.Выполнить();
	//Есть еще бронь, из заказов удалем ее   
	//Как будет обновлен АРМ надо сделать
	//И поудалять тут запросы.
	ТЗБронь = АРМОбъект.ПолучитьТЗБронь(Запрос, ТаблицаЗначенийРемонтов.ВыгрузитьКолонку("Номенклатура"));
	//ТЗБронь = ПолучитьТЗБронь(Запрос, ТаблицаЗначенийРемонтов.ВыгрузитьКолонку("Номенклатура"));
	Отбор = Новый Структура("Номенклатура, ЗаказКлиента");
	Для каждого СтрокаБрони из ТЗБронь цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаБрони);
		СтрокиЗаказов = ЗаказыКлиента.НайтиСтроки(Отбор);
		Для каждого СтрокаЗаказа из СтрокиЗаказов цикл
			ЗаказыКлиента.Удалить(СтрокаЗаказа);
		КонецЦикла;
	КонецЦИкла;
	//Собираем некондиционные и кондиционные товары
	НеКондиционныеТовары = АРМОбъект.ПолучитьТЗОстатков(
	Запрос,ТаблицаЗначенийРемонтов.ВыгрузитьКолонку("Номенклатура"), Ложь); 
	Отбор = Новый Структура("Номенклатура"); 
	//Убираем бронь из них
	Для каждого СтрокаБрони из ТЗБронь цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаБрони);
		СтрокиОстатков = НеКондиционныеТовары.НайтиСтроки(Отбор);
		ОстатокДляСписания = СтрокаБрони.Бронь;
		Для каждого СтрокаОстатка из НеКондиционныеТовары цикл
			Если СтрокаОстатка.ГруппаСкладов = СтрокаБрони.ГруппаСкладов Тогда
				Списываем = Мин(ОстатокДляСписания, СтрокаОстатка.Остаток);
				ОстатокДляСписания = ОстатокДляСписания - Списываем;
				СтрокаОстатка.Остаток = СтрокаОстатка.Остаток - Списываем;
			КонецЕсли;
		КонецЦикла;
	КонецЦИкла;
	
	Если НЕ ТаблицаЗначенийРемонтов.Количество() Тогда
		Возврат;
	КонецЕсли;
	//Объединить запрос по остаткам
	//и нашей основой таблицей ремонтов
	//В запросе может быть от 1 до до 8 дублей
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ИсходныйОстаток КАК ИсходныйОстаток,
	|	ВложенныйЗапрос.ГруппаСкладов КАК ГруппаСкладов,	
	|	ВложенныйЗапрос.Остаток КАК Остаток,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВложенныйЗапрос.ПорядокСортировки1 КАК ПорядокСортировки1,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.КоличествоНекондиция КАК КоличествоНекондиция,
	|	ВложенныйЗапрос.ВключенВГрафикРемонта КАК ВключенВГрафикРемонта,
	|	ВложенныйЗапрос.ОкончаниеРемонта КАК ОкончаниеРемонта,
	|	ВложенныйЗапрос.ПорядокСортировки КАК ПорядокСортировки,
	|	ЕСТЬNULL(ВложенныйЗапрос.ОписаниеРемонта, """") КАК ОписаниеРемонта,
	|	ЕСТЬNULL(ВложенныйЗапрос.ПутьКФото, """") КАК ПутьКФото,
	|	ВложенныйЗапрос.НазначениеНаправлениеДеятельности КАК НазначениеНаправлениеДеятельности,
	|	ВложенныйЗапрос.ОтгрузкаПоСлужебнойЗаписке КАК ОтгрузкаПоСлужебнойЗаписке,
	|	ВложенныйЗапрос.НакопительныйИтог КАК НакопительныйИтог,
	|	ВложенныйЗапрос.НазначениеОстаткаЗаказ КАК НазначениеОстаткаЗаказ
	|ПОМЕСТИТЬ ВтВложенныйЗапрос
	|ИЗ
	|	&ВложенныйЗапрос КАК ВложенныйЗапрос
	|; ";
	Текст = 
	"ВЫБРАТЬ
	|	ДиаграммаГанта.ДатаНачалаРаботПланФакт КАК ДатаНачалаРаботПланФакт,
	|	ДиаграммаГанта.ДатаОкончанияРаботПланФакт КАК ДатаОкончанияРаботПланФакт,
	|	ДиаграммаГанта.НачалоГрафик КАК НачалоГрафик,
	|	ДиаграммаГанта.НомерДокумента КАК НомерДокумента,
	|	ДиаграммаГанта.ДатаРегистрации КАК ДатаРегистрации,
	|	ДиаграммаГанта.КонецГрафик КАК КонецГрафик,
	|	ДиаграммаГанта.НачалоФакт КАК НачалоФакт,
	|	ДиаграммаГанта.КонецФакт КАК КонецФакт,
	|	ДиаграммаГанта.статус КАК статус,
	|	ДиаграммаГанта.Артикул КАК Артикул,
	//|	ВЫБОР
	//|		КОГДА ДиаграммаГанта.ДатаОкончанияРаботВРаботе = ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА 0
	//|		КОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДиаграммаГанта.ДатаОкончанияРаботВРаботе, ДЕНЬ, -2), ВЫБОР
	//|					КОГДА ДиаграммаГанта.ПериодПредыдущегоСтатусаВРаботе ЕСТЬ NULL
	//|						ТОГДА &ДатаСеанса
	//|					ИНАЧЕ ДиаграммаГанта.ПериодПредыдущегоСтатусаВРаботе
	//|				КОНЕЦ, ДЕНЬ) > 0
	//|			ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДиаграммаГанта.ДатаОкончанияРаботВРаботе, ДЕНЬ, -2), ВЫБОР
	//|						КОГДА ДиаграммаГанта.ПериодПредыдущегоСтатусаВРаботе ЕСТЬ NULL
	//|							ТОГДА &ДатаСеанса
	//|						ИНАЧЕ ДиаграммаГанта.ПериодПредыдущегоСтатусаВРаботе
	//|					КОНЕЦ, ДЕНЬ)
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ДнейПросрочкиВРаботе,
	//|	ВЫБОР
	//|		КОГДА ДиаграммаГанта.ДатаОкончанияРаботОтложено = ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА 0
	//|		КОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДиаграммаГанта.ДатаОкончанияРаботОтложено, ДЕНЬ, -4), ВЫБОР
	//|					КОГДА ДиаграммаГанта.ПериодПредыдущегоСтатусаОтложено ЕСТЬ NULL
	//|						ТОГДА &ДатаСеанса
	//|					ИНАЧЕ ДиаграммаГанта.ПериодПредыдущегоСтатусаОтложено
	//|				КОНЕЦ, ДЕНЬ) > 0
	//|			ТОГДА РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ДиаграммаГанта.ДатаОкончанияРаботОтложено, ДЕНЬ, -4), ВЫБОР
	//|						КОГДА ДиаграммаГанта.ПериодПредыдущегоСтатусаОтложено ЕСТЬ NULL
	//|							ТОГДА &ДатаСеанса
	//|						ИНАЧЕ ДиаграммаГанта.ПериодПредыдущегоСтатусаОтложено
	//|					КОНЕЦ, ДЕНЬ)
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ДнейПросрочкиОтложено,
	|	ДиаграммаГанта.ТребуетсяВыездИнженераЗавершено КАК ТребуетсяВыездИнженераЗавершено,
	|	ДиаграммаГанта.ТребуетсяЗаказЗапчастиЗавершено КАК ТребуетсяЗаказЗапчастиЗавершено,
	|	ДиаграммаГанта.ТребуетсяВыездИнженераОтложено КАК ТребуетсяВыездИнженераОтложено,
	|	ДиаграммаГанта.ТребуетсяЗаказЗапчастиОтложено КАК ТребуетсяЗаказЗапчастиОтложено,
	|	ДиаграммаГанта.ДатаОкончанияРабот КАК ДатаОкончанияРабот,
	|	ДиаграммаГанта.ТребуетсяВыездИнженераВРаботе КАК ТребуетсяВыездИнженераВРаботе,
	|	ДиаграммаГанта.ТребуетсяЗаказЗапчастиВРаботе КАК ТребуетсяЗаказЗапчастиВРаботе,
	|	ДиаграммаГанта.ТребуетсяВыездИнженераЗапланировано КАК ТребуетсяВыездИнженераЗапланировано,
	|	ДиаграммаГанта.ТребуетсяЗаказЗапчастиЗапланировано КАК ТребуетсяЗаказЗапчастиЗапланировано,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	|			ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаОтложено, &ДатаСеанса, ДЕНЬ)
	|		КОГДА ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе ЕСТЬ NULL
	|			ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|		КОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ) <= 0
	|			ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ)
	|	КОНЕЦ КАК СрокОжидания,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаОтложено, &ДатаСеанса, ДЕНЬ)
	|					КОГДА ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе ЕСТЬ NULL
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|					КОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ) <= 0
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|					ИНАЧЕ РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ)
	|				КОНЕЦ > &СрокОжиданияРемонта
	|				И ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СрокОжиданияОкраска,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|			ТОГДА ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе
	|	КОНЕЦ КАК ДатаНачалаРаботы,
	|	ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе КАК ДатаИзмененияСтатусаВРаботе,
	|	ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано КАК ДатаИзмененияСтатусаЗапланировано,
	|	ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено КАК ДатаИзмененияСтатусаЗавершено,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|			ТОГДА ВЫБОР
	|					КОГДА ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено ЕСТЬ NULL
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, &ДатаСеанса, ДЕНЬ)
	|					ИНАЧЕ РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено, ДЕНЬ)
	|				КОНЕЦ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СрокРемонта,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	|				И ДиаграммаГанта.ТребуетсяЗаказЗапчасти
	|				И РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаОтложено, &ДатаСеанса, ДЕНЬ) > &СрокЗаказаЗапчасти
	|			ТОГДА 1
	|		КОГДА ВЫБОР
	|					КОГДА ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено ЕСТЬ NULL
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, &ДатаСеанса, ДЕНЬ)
	|					ИНАЧЕ РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено, ДЕНЬ)
	|				КОНЕЦ > &СрокРемонта
	|				И ДиаграммаГанта.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СрокРемонтаОкраска,
	|	ЕСТЬNULL(ДиаграммаГанта.Номенклатура, ВложенныйЗапрос.Номенклатура) КАК Номенклатура,
	|	ДиаграммаГанта.Серия КАК Серия,
	|	ДиаграммаГанта.КоличествоОформлено КАК КоличествоОформлено,
	|	ДиаграммаГанта.НомерАкта КАК НомерАкта,
	|	ДиаграммаГанта.ДатаАкта КАК ДатаАкта,
	|	ДиаграммаГанта.Характеристика КАК Характеристика,
	|	ДиаграммаГанта.Назначение КАК Назначение,
	|	ДиаграммаГанта.Склад КАК Склад,
	|	0 КАК ПроцентОплатыЧисло,
	|	ДиаграммаГанта.Ответственный КАК Ответственный,
	|	ДиаграммаГанта.Организация КАК Организация,
	|	&ШтрафПросрочка КАК ШтрафПросрочка,
	|	ДиаграммаГанта.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДиаграммаГанта.Причина КАК Причина,
	|	ДиаграммаГанта.КоличествоВРаботе КАК КоличествоВРаботе,
	|	ДиаграммаГанта.СтатусДокумента КАК СтатусДокумента,
	|	ДиаграммаГанта.КоличествоЗавершено КАК КоличествоЗавершено,
	|	ЕСТЬNULL(ДиаграммаГанта.Регистратор, ВложенныйЗапрос.Регистратор) КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.Регистратор ЕСТЬ NULL
	|			ТОГДА ""ЭтоКондиция""
	|		ИНАЧЕ ""ЭтоНеКондиция""
	|	КОНЕЦ КАК СостояниеТовара,
	|	ДиаграммаГанта.Описание КАК Описание,
	|	ДиаграммаГанта.Приоритет КАК Приоритет,
	|	ДиаграммаГанта.ОтгрузкаПоСлужебнойЗаписке КАК ОтгрузкаПоСлужебнойЗаписке,
	|	ДиаграммаГанта.ВключенВГрафикРемонта КАК ВключенВГрафикРемонта,
	|	ВложенныйЗапрос.ИсходныйОстаток КАК ИсходныйОстаток,
	|	ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0) КАК Остаток,
	|	РАЗНОСТЬДАТ(ДиаграммаГанта.НачалоГрафик, &ДатаСеанса, ДЕНЬ) КАК Длительность,
	|	ВложенныйЗапрос.ПорядокСортировки1 КАК ПорядокСортировки1,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельностиГант,
	|	ВложенныйЗапрос.КоличествоНекондиция КАК КоличествоНекондиция,
	|	ВложенныйЗапрос.ОкончаниеРемонта КАК ОкончаниеРемонта,
	|	ВложенныйЗапрос.ПорядокСортировки КАК ПорядокСортировки,
	|	ВложенныйЗапрос.ГруппаСкладов КАК ГруппаСкладов,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказКлиента,
	|	ЕСТЬNULL(ВложенныйЗапрос.ОписаниеРемонта, """") КАК ОписаниеРемонта,
	|	ЕСТЬNULL(ВложенныйЗапрос.ПутьКФото, """") КАК ПутьКФото,
	|	ВложенныйЗапрос.НазначениеНаправлениеДеятельности КАК НазначениеНаправлениеДеятельности,
	|	ВложенныйЗапрос.НакопительныйИтог КАК НакопительныйИтог,
	|	ВложенныйЗапрос.НазначениеОстаткаЗаказ КАК НазначениеОстаткаЗаказ
	|ИЗ
	|	ВтВложенныйЗапрос КАК ВложенныйЗапрос
	|		ПОЛНОЕ СОЕДИНЕНИЕ Вт_ДляМенеджера КАК ДиаграммаГанта
	|		ПО ВложенныйЗапрос.Регистратор = ДиаграммаГанта.Регистратор
	|			И ВложенныйЗапрос.Номенклатура = ДиаграммаГанта.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки,
	|	ДатаНачалаРаботПланФакт
	//|ИТОГИ
	//|	МАКСИМУМ(СостояниеТовара),
	//|	МАКСИМУМ(Остаток)
	//|ПО
	//|	Номенклатура,
	//|	Регистратор
	|";  
	//Распределить заказы по некондиции см АРМ склад строка 843   
	Запрос.УстановитьПараметр("ВложенныйЗапрос",НеКондиционныеТовары); 
	Запрос.УстановитьПараметр("ДатаСеанса",ТекущаяДатаСеанса()); 
	Запрос.УстановитьПараметр("СрокОжиданияРемонта",РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("СрокОжиданияРемонта")); 
	Запрос.УстановитьПараметр("СрокЗаказаЗапчасти",РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("СрокЗаказаЗапчасти"));
	Запрос.УстановитьПараметр("ШтрафПросрочка",РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("ШтрафПросрочка"));
	Запрос.УстановитьПараметр("СрокРемонта",РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("СрокРемонта")); 
	Запрос.Текст = Запрос.Текст+Текст;
	ТЗВывод = Запрос.Выполнить().Выгрузить();
	ТЗВывод.Очистить();
	Запрос.Текст = Текст;

	СтрокаОстаткаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПредыдущийРегистратор = Новый Структура;  
	Пока СтрокаОстаткаПоНоменклатуре.Следующий() Цикл 
		//ВыборкаПоРегистратору = СтрокаОстаткаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОтборПоНоменклатуре = Новый Структура("Номенклатура",СтрокаОстаткаПоНоменклатуре.Номенклатура);
		ТЗЗаказыКлиентовПоНоменклатуре = ЗаказыКлиента.НайтиСтроки(ОтборПоНоменклатуре);
		//Правильный заказ для этого фиксируем текущий регистратор.
		//Если предыдущий регистратор равен текущему, то подставляем заказ
		//Пока ВыборкаПоРегистратору.Следующий() Цикл
			
			СтрокаЗаказаДляЗаполнения= Новый Структура;
			//ОстатокПоНоменклатуре = ВыборкаПоРегистратору.Остаток;
			ОстатокПоНоменклатуре = СтрокаОстаткаПоНоменклатуре.Остаток;
			
			Для каждого СтрокаЗаказа из ТЗЗаказыКлиентовПоНоменклатуре цикл   
				//Если группа складов не заполнена не подбираем заказ 
				//потому что колонка остатков "Прочие склады" и "Товары в пути" не участвует в распределении заказов
				Если СтрокаОстаткаПоНоменклатуре.ГруппаСкладов = Null Тогда
					продолжить;
				КонецЕсли;
				СкладОтгрузки = СтрокаЗаказа.СкладОтгрузки;				
				ОстатокДляНекондиции = СтрокаОстаткаПоНоменклатуре.Остаток;                              
				Списываем = Мин(СтрокаЗаказа.ОстатокЗаказаКлиента, ОстатокПоНоменклатуре);
				Если Списываем > 0  тогда
					Если СтрокаЗаказа.ОстатокЗаказаКлиента <= 0 Или ОстатокПоНоменклатуре <= 0 тогда 
						Продолжить;
					КонецЕсли;  
					Если СтрокаОстаткаПоНоменклатуре.СостояниеТовара = "ЭтоНеКондиция"  Тогда 
						// если ремонт, то заполняем оплату
						СтрокаЗаказаДляЗаполнения = СтрокаЗаказа; 
					Иначе
						СтрокаЗаказаДляЗаполнения = Новый Структура; 
					КонецЕсли;     
					СтрокаЗаказа.ОстатокЗаказаКлиента = СтрокаЗаказа.ОстатокЗаказаКлиента - Списываем; 
					ОстатокПоНоменклатуре = ОстатокПоНоменклатуре - Списываем;
				КонецЕсли;
				
			КонецЦикла;
			//ВыборкаДетальная = ВыборкаПоРегистратору.Выбрать();  
			//Пока ВыборкаДетальная.Следующий() Цикл 
				//Если ВыборкаДетальная.СостояниеТовара = "ЭтоНеКондиция" Тогда   
				Если СтрокаОстаткаПоНоменклатуре.СостояниеТовара = "ЭтоНеКондиция" Тогда   
					Строка = ТЗВывод.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, СтрокаОстаткаПоНоменклатуре);	
					
					ЗаполнитьЗначенияСвойств(Строка, СтрокаЗаказаДляЗаполнения);   
				КонецЕсли;	       
				
			//КонецЦикла;    
		//КонецЦикла;
	КонецЦикла;	
 
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	Если КАМИ_РаботаСКонстантамиПовтИсп.ПолучитьЗначениеКонстантыКАМИ("НовыйРасчетШтрафов") Тогда
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Штрафы; // НаборДанныхОбъединениеСхемыКомпоновкиДанных 
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(КАМИ_РемонтОборудования.РасчетШтрафовРемонтовОборудования());
		ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
		НаборДанных.Запрос = ТекстЗапроса;
		
		
	КонецЕсли;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	
	ВнешнийНаборДанных = Новый Структура("ТЗДанныеДляОтчета", ТЗВывод); 
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); 
	
	ДокументРезультат.Очистить();
	
 	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

КонецПроцедуры
                        

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
//Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//	
//КонецПроцедуры
Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	//Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
	//	КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроекФормы, "ЕдиницыКоличества");
	//КонецЕсли;
	
КонецПроцедуры


Процедура УстановитьПараметрыВыводаТабличногоДокумента(ДокументРезультат)
	ДокументРезультат.Автомасштаб 			= 	Истина;
	ДокументРезультат.ОриентацияСтраницы 	= 	ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ТолькоПросмотр		= 	Истина;
	ДокументРезультат.ПолеСверху			= 	5;
	ДокументРезультат.ПолеСнизу				= 	0;
	ДокументРезультат.ПолеСлева				= 	10;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли