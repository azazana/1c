#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
Функция СведенияОВнешнейОбработке() Экспорт
  
  ПараметрыРегистрации = Новый Структура;
  ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет"); //Варианты: "ДополнительнаяОбработка", "ДополнительныйОтчет", "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов" 

   
  ПараметрыРегистрации.Вставить("Наименование", "Отчет по ремонту оборудования с окраской");
  ПараметрыРегистрации.Вставить("Версия", "1.8"); //"1.0"
  ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь); //Варианты: Истина, Ложь
  ПараметрыРегистрации.Вставить("Информация", "Отчет по ремонту оборудования с оплатой");
  ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");// не ниже какой версии БСП подерживается обработка
  
  ПараметрыРегистрации.Вставить("РассылкаОтчетов", Истина); //Варианты: Истина, Ложь

  ТаблицаКоманд = ПолучитьТаблицуКоманд();

  ДобавитьКоманду(ТаблицаКоманд,
          Метаданные().Представление(),
          Метаданные().Представление(),
          "ОткрытиеФормы",  //Использование.  Варианты: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"   
          Ложь,//Показывать оповещение. Варианты Истина, Ложь 
          "");//Модификатор 

  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

  Возврат ПараметрыРегистрации;

КонецФункции

Функция ПолучитьТаблицуКоманд()

  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

  Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры
	
	
#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	//Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;

КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды")
		И Параметры.Свойство("ОписаниеКоманды")
		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда
		
		Если Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ОтчетПоИнтересам" Тогда
			
			// СформироватьПараметрыФормыОтчетПоКлиенту(Параметры.ПараметрКоманды, ЭтаФорма.ФормаПараметры);
			
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ПродажиПоЗаказу" Тогда
		//	ЭтаФорма.ФормаПараметры.Отбор.Вставить("ЗаказКлиента", Параметры.ПараметрКоманды);
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ПродажиПоНоменклатуре" Тогда
		//	ЭтаФорма.ФормаПараметры.Отбор.Вставить("Номенклатура", Параметры.ПараметрКоманды);
		//ИначеЕсли Параметры.ОписаниеКоманды.ДополнительныеПараметры.ИмяКоманды = "ПродажиПоСегменту" Тогда
		//	
		//	Параметры.ФиксированныеНастройки = ПолучитьФиксированныеНастройкиПродажиПоСегменту(Параметры.ПараметрКоманды);
		//	ЭтаФорма.ФормаПараметры.ФиксированныеНастройки = Параметры.ФиксированныеНастройки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительные команды
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных
	НастройкиОтчета = ЭтаФорма.НастройкиОтчета;
	
	//ЭтаФорма.НастройкиОтчета.Вставить("ВыводитьЗаголовкиНастроек", Истина);
	
	//Если НастройкиОтчета.Свойство("РасширенныйОтбор") Тогда
	//	РасширенныйОтбор = КомпоновщикНастроекФормы.ФиксированныеНастройки.Отбор.Элементы.Добавить(
	//		Тип("ЭлементОтбораКомпоновкиДанных"));
	//	РасширенныйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
	//	Если ТипЗнч(НастройкиОтчета.РасширенныйОтбор) = Тип("Массив") Тогда
	//		ЭтоМассив = Истина;
	//		Если НастройкиОтчета.РасширенныйОтбор.Количество() > 0 Тогда
	//			ПервыйЭлемент = НастройкиОтчета.РасширенныйОтбор[0];
	//		Иначе
	//			ПервыйЭлемент = Неопределено;
	//		КонецЕсли;
	//	Иначе
	//		ЭтоМассив = Ложь;
	//		ПервыйЭлемент = НастройкиОтчета.РасширенныйОтбор;
	//	КонецЕсли;
	//	Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
	//		Если ЭтоМассив Тогда
	//			ЕстьПодчиненныеПартнеры = Ложь;
	//			Для Каждого ЭлементПараметраКоманды Из НастройкиОтчета.РасширенныйОтбор Цикл
	//				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
	//					ЕстьПодчиненныеПартнеры = Истина;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//		Иначе
	//			ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(НастройкиОтчета.РасширенныйОтбор);
	//		КонецЕсли;
	//		Если ЕстьПодчиненныеПартнеры И ЭтоМассив Тогда
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	//		ИначеЕсли ЕстьПодчиненныеПартнеры Тогда
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	//		ИначеЕсли ЭтоМассив Тогда
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		Иначе
	//			РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//		КонецЕсли;
	//		РасширенныйОтбор.ПравоеЗначение = НастройкиОтчета.РасширенныйОтбор;
	//	ИначеЕсли ТипЗнч(НастройкиОтчета.РасширенныйОтбор) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
	//		РасширенныйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		РасширенныйОтбор.ПравоеЗначение = СегментыСервер.МассивЭлементов(
	//			ПервыйЭлемент);
	//	КонецЕсли;
	//	РасширенныйОтбор.Использование = Истина;
	//КонецЕсли;
	////++ Локализация
	////++ НЕ УТ	
	//БухгалтерскиеОтчеты.ИнициализироватьРежимВыгрузкиБСП(ЭтаФорма);
	//-- НЕ УТ
	//-- Локализация

	//Параметры = Форма.Параметры;
	//
	//Если Параметры.Свойство("ПараметрКоманды") Тогда
	//	
	//	Если Параметры.Свойство("ОписаниеКоманды")
	//		И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда
	//		
	//		// Структура с полями из ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов.
	//		ОписаниеКоманды = Параметры.ОписаниеКоманды; // Структура -
	//		ДополнительныеПараметрыКоманды = ОписаниеКоманды.ДополнительныеПараметры; // Структура -
	//		Если ДополнительныеПараметрыКоманды.ИмяКоманды = "ВедомостьПоДокументам" Тогда
	//			Форма.ФормаПараметры.Отбор.Вставить("Клиент", Параметры.ПараметрКоманды);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
	
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	ДокументРезультат.Очистить();
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
	СхемаКонфигурацииОсновнаяТаблица = ПолучитьМакет("ГрафикРемонтаОсновнаяТаблица"); 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпановкиОсновнаяТаблица = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(НастройкиКомпановкиОсновнаяТаблица,Настройки);
	НастройкиКомпановкиОсновнаяТаблица.Структура.Очистить();
	ГруппировкаДетальныеЗаписи = НастройкиКомпановкиОсновнаяТаблица.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	НастройкиКомпановкиОсновнаяТаблица.Выбор.Элементы.Очистить(); 
	Для каждого ПолеВыбора Из СхемаКонфигурацииОсновнаяТаблица.НастройкиПоУмолчанию.Выбор.Элементы  Цикл
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, ПолеВыбора);
	КонецЦикла;           
	НастройкиКомпановкиОсновнаяТаблица.УсловноеОформление.Элементы.Очистить();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКонфигурацииОсновнаяТаблица, НастройкиКомпановкиОсновнаяТаблица,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
    ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКД.Инициализировать(МакетКомпоновки);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ТаблицаЗначенийРемонтов = Новый ТаблицаЗначений;     
    ПроцессорВывода.УстановитьОбъект(ТаблицаЗначенийРемонтов);
    ТаблицаЗначенийРемонтов = ПроцессорВывода.Вывести(ПроцессорКД);    
	
	НоменклатураДляОтбора = ТаблицаЗначенийРемонтов.ВыгрузитьКолонку("Номенклатура");  
		
	Период = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	ДатаОтчетаПолеКомпановки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	ДатаОтчета = Дата("00010101");
	Если ДатаОтчетаПолеКомпановки.Использование Тогда
		Если ТипЗнч(ДатаОтчетаПолеКомпановки.Значение) = Тип("Дата") Тогда
			ДатаОтчета = ДатаОтчетаПолеКомпановки.Значение;
		ИначеЕсли ТипЗнч(ДатаОтчетаПолеКомпановки.Значение.Дата) = Тип("Дата") Тогда
			ДатаОтчета = ДатаОтчетаПолеКомпановки.Значение.Дата;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	АРМОбъект = Обработки.КАМИ_АРМСклад.Создать();
	//Устанавливаем отборы для запросов из АРМ склада.
	//АРМ склад используем чтобы достать процент оплаты
	Запрос.УстановитьПараметр("Пользователь",Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СкрываемаяВАРМОрганизация",РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("СкрываемаяВАРМОрганизация"));
	Запрос.УстановитьПараметр("ЕстьДоступКСкрываемойОрганизации",Истина);   

	Запрос.УстановитьПараметр("ДатаОтчета",?(ЗначениеЗаполнено(ДатаОтчета), КонецДня(ДатаОтчета), ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВключатьВсюНоменклатуру", Ложь);
	Запрос.УстановитьПараметр("ВключаемыеСклады", Новый Массив);
	Запрос.УстановитьПараметр("ВключатьВсеСклады", Истина);
	Запрос.УстановитьПараметр("ИсключаемыеСклады", Новый Массив);	
	Запрос.УстановитьПараметр("ВсегдаИсключаемыеСклады", Новый Массив);	
	Запрос.УстановитьПараметр("ВключаемыеМенеджеры", Новый Массив);	
	Запрос.УстановитьПараметр("ИсключаемыеМенеджеры", Новый Массив);	
	Запрос.УстановитьПараметр("ВключатьВсехМенеджеров", Истина);	
	НаправлениеДеятельностиНекондиция=РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("Направление деятельности некондиция");
	Запрос.УстановитьПараметр("НаправлениеДеятельностиНекондиция", НаправлениеДеятельностиНекондиция);
	//Получаем остатки по заказам клиентов
	ЗаказыКлиента = Обработки.КАМИ_АРМСклад.ПолучитьТЗЗаказыКлиентов(Запрос, НоменклатураДляОтбора);
	
	Если ЗаказыКлиента.Количество()>0 Тогда
		ЗаказыКлиента.Сортировать("ПроцентОплатыЧисло Убыв");
	КонецЕсли;
	
	Запрос.Текст =  " УНИЧТОЖИТЬ СкладыИсключенные; ";
	Запрос.Выполнить();
	ТЗБронь = АРМОбъект.ПолучитьТЗБронь(Запрос, НоменклатураДляОтбора);
	АРМОбъект.Ками_УдалитьИзЗаказовДублиБрони(ТЗБронь, ЗаказыКлиента);  
	//Собираем некондиционные и кондиционные товары
	НеКондиционныеТовары = АРМОбъект.ПолучитьТЗОстатков(Запрос, НоменклатураДляОтбора, Ложь); 
	//  {{КАМИ # Борзенкова		Переиспользуем процедуру в графиках 27.11.2023
	АРМОбъект.КАМИ_УдалитьБроньИзОстатков(ТЗБронь,НеКондиционныеТовары);
	//  КАМИ # Борзенкова		Переиспользуем процедуру в графиках 27.11.2023}}
	
	Если НЕ ТаблицаЗначенийРемонтов.Количество() Тогда
		Возврат;
	КонецЕсли;
	//Объединить запрос по остаткам
	//и нашей основой таблицей ремонтов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ИсходныйОстаток КАК ИсходныйОстаток,
	|	ВложенныйЗапрос.ГруппаСкладов КАК ГруппаСкладов,	
	|	ВложенныйЗапрос.Остаток КАК Остаток,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВложенныйЗапрос.ПорядокСортировки1 КАК ПорядокСортировки1,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.КоличествоНекондиция КАК КоличествоНекондиция,
	|	ВложенныйЗапрос.ВключенВГрафикРемонта КАК ВключенВГрафикРемонта,
	|	ВложенныйЗапрос.ОкончаниеРемонта КАК ОкончаниеРемонта,
	|	ВложенныйЗапрос.ПорядокСортировки КАК ПорядокСортировки,
	|	ЕСТЬNULL(ВложенныйЗапрос.ОписаниеРемонта, """") КАК ОписаниеРемонта,
	|	ЕСТЬNULL(ВложенныйЗапрос.ПутьКФото, """") КАК ПутьКФото,
	|	ВложенныйЗапрос.НазначениеНаправлениеДеятельности КАК НазначениеНаправлениеДеятельности,
	|	ВложенныйЗапрос.ОтгрузкаПоСлужебнойЗаписке КАК ОтгрузкаПоСлужебнойЗаписке,
	|	ВложенныйЗапрос.НакопительныйИтог КАК НакопительныйИтог,
	|	ВложенныйЗапрос.НазначениеОстаткаЗаказ КАК НазначениеОстаткаЗаказ
	|ПОМЕСТИТЬ ВтВложенныйЗапрос
	|ИЗ
	|	&ВложенныйЗапрос КАК ВложенныйЗапрос
	|; 
	|";
	Текст = 
	"ВЫБРАТЬ * 
	|ПОМЕСТИТЬ ВТ_ОсновнаяТаблица
	|ИЗ
	|	&ОсновнаяТаблица как ОсновнаяТаблица
    |
	|;
	|////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДиаграммаГанта.ДатаНачалаРаботПланФакт КАК ДатаНачалаРаботПланФакт,
	|	ДиаграммаГанта.ДатаОкончанияРаботПланФакт КАК ДатаОкончанияРаботПланФакт,
	|	ДиаграммаГанта.НачалоГрафик КАК НачалоГрафик,
	|	ДиаграммаГанта.НомерДокумента КАК НомерДокумента,
	|	ДиаграммаГанта.ДатаРегистрации КАК ДатаРегистрации,
	|	ДиаграммаГанта.КонецГрафик КАК КонецГрафик,
	|	ДиаграммаГанта.НачалоФакт КАК НачалоФакт,
	|	ДиаграммаГанта.КонецФакт КАК КонецФакт,
	|	ДиаграммаГанта.Артикул КАК Артикул,
	|	ДиаграммаГанта.ДатаОкончанияРабот КАК ДатаОкончанияРабот,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	|			ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаОтложено, &ДатаСеанса, ДЕНЬ)
	|		КОГДА ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе ЕСТЬ NULL
	|			ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|		КОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ) <= 0
	|			ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ)
	|	КОНЕЦ КАК СрокОжидания,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|					КОГДА ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаОтложено, &ДатаСеанса, ДЕНЬ)
	|					КОГДА ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе ЕСТЬ NULL
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|					КОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ) <= 0
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, &ДатаСеанса, ДЕНЬ)
	|					ИНАЧЕ РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано, ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДЕНЬ)
	|				КОНЕЦ > &СрокОжиданияРемонта
	|				И ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СрокОжиданияОкраска,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|			ТОГДА ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе
	|	КОНЕЦ КАК ДатаНачалаРаботы,
	|	ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе КАК ДатаИзмененияСтатусаВРаботе,
	|	ДиаграммаГанта.ДатаИзмененияСтатусаЗапланировано КАК ДатаИзмененияСтатусаЗапланировано,
	|	ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено КАК ДатаИзмененияСтатусаЗавершено,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента <> ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Запланировано)
	|			ТОГДА ВЫБОР
	|					КОГДА ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено ЕСТЬ NULL
	|						ТОГДА РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, &ДатаСеанса, ДЕНЬ)
	|					ИНАЧЕ РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаВРаботе, ДиаграммаГанта.ДатаИзмененияСтатусаЗавершено, ДЕНЬ)
	|				КОНЕЦ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СрокРемонта,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.КАМИ_СтатусыСервисныхРабот.Отложено)
	|				И ДиаграммаГанта.ТребуетсяЗаказЗапчасти
	|				И РАЗНОСТЬДАТ(ДиаграммаГанта.ДатаИзмененияСтатусаОтложено, &ДатаСеанса, ДЕНЬ) > &СрокЗаказаЗапчасти
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СрокРемонтаОкраскаЗапчасти,
	|	ЕСТЬNULL(ДиаграммаГанта.Номенклатура, ВложенныйЗапрос.Номенклатура) КАК Номенклатура,
	|	ДиаграммаГанта.Серия КАК Серия,
	|	ДиаграммаГанта.КоличествоОформлено КАК КоличествоОформлено,
	|	ДиаграммаГанта.НомерАкта КАК НомерАкта,
	|	ДиаграммаГанта.ДатаАкта КАК ДатаАкта,
	|	ДиаграммаГанта.Характеристика КАК Характеристика,
	|	ДиаграммаГанта.Назначение КАК Назначение,
	|	ДиаграммаГанта.Склад КАК Склад,
	|	0 КАК ПроцентОплатыЧисло,
	|	ДиаграммаГанта.Ответственный КАК Ответственный,
	|	ДиаграммаГанта.Организация КАК Организация,
	|	ДиаграммаГанта.ВНаличии КАК ВНаличии,
	|	ДиаграммаГанта.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДиаграммаГанта.Причина КАК Причина,
	|	ДиаграммаГанта.КоличествоВРаботе КАК КоличествоВРаботе,
	|	ДиаграммаГанта.СтатусДокумента КАК СтатусДокумента,
	|	ДиаграммаГанта.КоличествоЗавершено КАК КоличествоЗавершено,
	|	ЕСТЬNULL(ДиаграммаГанта.Регистратор, ВложенныйЗапрос.Регистратор) КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ДиаграммаГанта.Регистратор ЕСТЬ NULL
	|			ТОГДА ""ЭтоКондиция""
	|		ИНАЧЕ ""ЭтоНеКондиция""
	|	КОНЕЦ КАК СостояниеТовара,
	|	ДиаграммаГанта.Описание КАК Описание,
	|	ДиаграммаГанта.Приоритет КАК Приоритет,
	|	ДиаграммаГанта.ОтгрузкаПоСлужебнойЗаписке КАК ОтгрузкаПоСлужебнойЗаписке,
	|	ДиаграммаГанта.ВключенВГрафикРемонта КАК ВключенВГрафикРемонта,
	|	ВложенныйЗапрос.ИсходныйОстаток КАК ИсходныйОстаток,
	|	ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0) КАК Остаток,
	|	РАЗНОСТЬДАТ(ДиаграммаГанта.НачалоГрафик, &ДатаСеанса, ДЕНЬ) КАК Длительность,
	|	ВложенныйЗапрос.ПорядокСортировки1 КАК ПорядокСортировки1,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельностиГант,
	|	ВложенныйЗапрос.КоличествоНекондиция КАК КоличествоНекондиция,
	|	ВложенныйЗапрос.ОкончаниеРемонта КАК ОкончаниеРемонта,
	|	ВложенныйЗапрос.ПорядокСортировки КАК ПорядокСортировки,
	|	ВложенныйЗапрос.ГруппаСкладов КАК ГруппаСкладов,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказКлиента,
	|	ЕСТЬNULL(ВложенныйЗапрос.ОписаниеРемонта, """") КАК ОписаниеРемонта,
	|	ЕСТЬNULL(ВложенныйЗапрос.ПутьКФото, """") КАК ПутьКФото,
	|	ВложенныйЗапрос.НазначениеНаправлениеДеятельности КАК НазначениеНаправлениеДеятельности,
	|	ВложенныйЗапрос.НакопительныйИтог КАК НакопительныйИтог,
	|	ВложенныйЗапрос.НазначениеОстаткаЗаказ КАК НазначениеОстаткаЗаказ
	|ИЗ
	|	ВтВложенныйЗапрос КАК ВложенныйЗапрос
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОсновнаяТаблица КАК ДиаграммаГанта
	|		ПО ВложенныйЗапрос.Регистратор = ДиаграммаГанта.Регистратор
	|			И ВложенныйЗапрос.Номенклатура = ДиаграммаГанта.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки1,
	|	ОтгрузкаПоСлужебнойЗаписке,
	|	ПорядокСортировки
	|";  
	//Распределить заказы по некондиции см АРМ склад строка 843   
	Запрос.УстановитьПараметр("ОсновнаяТаблица", ТаблицаЗначенийРемонтов); 
	Запрос.УстановитьПараметр("ВложенныйЗапрос", НеКондиционныеТовары); 
	Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДатаСеанса()); 
	Запрос.УстановитьПараметр("СрокОжиданияРемонта", РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("СрокОжиданияРемонта")); 
	Запрос.УстановитьПараметр("СрокЗаказаЗапчасти", РегистрыСведений.КАМИ_ЗначенияКонстант.ПолучитьЗначение("СрокЗаказаЗапчасти"));
	Запрос.Текст = Запрос.Текст+Текст;
	РезультатЗапроса = Запрос.Выполнить();
	ТЗВывод = РезультатЗапроса.Выгрузить();
	ТЗВывод.Очистить();
	Запрос.Текст = Текст;

	СтрокаОстаткаПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПредыдущийРегистратор = Новый Структура;  
	Пока СтрокаОстаткаПоНоменклатуре.Следующий() Цикл 

		ОтборПоНоменклатуре = Новый Структура("Номенклатура", СтрокаОстаткаПоНоменклатуре.Номенклатура);
		ТЗЗаказыКлиентовПоНоменклатуре = ЗаказыКлиента.НайтиСтроки(ОтборПоНоменклатуре);
		
		СтрокаЗаказаДляЗаполнения= Новый Структура;
		ОстатокПоНоменклатуре = СтрокаОстаткаПоНоменклатуре.Остаток;
		
		Для каждого СтрокаЗаказа из ТЗЗаказыКлиентовПоНоменклатуре цикл   
			//Если группа складов не заполнена не подбираем заказ 
			//потому что колонка остатков "Прочие склады" и "Товары в пути" не участвует в распределении заказов
			Если СтрокаОстаткаПоНоменклатуре.ГруппаСкладов = Null Тогда
				продолжить;
			КонецЕсли;
			СкладОтгрузки = СтрокаЗаказа.СкладОтгрузки;				
			ОстатокДляНекондиции = СтрокаОстаткаПоНоменклатуре.Остаток;                              
			Списываем = Мин(СтрокаЗаказа.ОстатокЗаказаКлиента, ОстатокПоНоменклатуре);
			Если Списываем > 0  тогда
				Если СтрокаЗаказа.ОстатокЗаказаКлиента <= 0 Или ОстатокПоНоменклатуре <= 0 тогда 
					Продолжить;
				КонецЕсли;  
				Если СтрокаОстаткаПоНоменклатуре.СостояниеТовара = "ЭтоНеКондиция"  Тогда 
					// если ремонт, то заполняем оплату
					СтрокаЗаказаДляЗаполнения = СтрокаЗаказа; 
				Иначе
					СтрокаЗаказаДляЗаполнения = Новый Структура; 
				КонецЕсли;     
				СтрокаЗаказа.ОстатокЗаказаКлиента = СтрокаЗаказа.ОстатокЗаказаКлиента - Списываем; 
				ОстатокПоНоменклатуре = ОстатокПоНоменклатуре - Списываем;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаОстаткаПоНоменклатуре.СостояниеТовара = "ЭтоНеКондиция" Тогда   
			Строка = ТЗВывод.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаОстаткаПоНоменклатуре);	
			
			ЗаполнитьЗначенияСвойств(Строка, СтрокаЗаказаДляЗаполнения);   
		КонецЕсли;	       
		
	КонецЦикла;	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	Если КАМИ_РаботаСКонстантамиПовтИсп.ПолучитьЗначениеКонстантыКАМИ("НовыйРасчетШтрафов") Тогда

		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Штрафы; // НаборДанныхОбъединениеСхемыКомпоновкиДанных 
		
		ТекстыЗапросов = Новый Массив;
		ТекстыЗапросов.Добавить(КАМИ_РемонтОборудования.РасчетШтрафовРемонтовОборудования());
		ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ";");
		НаборДанных.Запрос = ТекстЗапроса;
		
	КонецЕсли;

	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	
	ВнешнийНаборДанных = Новый Структура("ТЗДанныеДляОтчета", ТЗВывод); 
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); 
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	

КонецПроцедуры

Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле) Экспорт
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Поле.Поле;
	ВыбранноеПоле.Использование = Истина;
		
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли     

